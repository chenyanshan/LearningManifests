apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubernetes-mcp-server-role
  namespace: aiops
rules:
- apiGroups: [""] # Core API group
  resources:
  - pods
  - pods/log
  - pods/exec
  - namespaces
  - events
  - services
  - configmaps
  - secrets
  - persistentvolumeclaims
  - nodes # Potentially for listing or getting node info
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
- apiGroups: ["apps"]
  resources:
  - deployments
  - statefulsets
  - daemonsets
  - replicasets
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
- apiGroups: ["batch"]
  resources:
  - jobs
  - cronjobs
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  - networkpolicies
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
- apiGroups: ["storage.k8s.io"]
  resources:
  - storageclasses
  - volumeattachments # If managing persistent storage
  verbs: ["get", "list", "watch"]
- apiGroups: ["apiextensions.k8s.io"] # For CRDs, if generic resource access implies this
  resources:
  - customresourcedefinitions
  verbs: ["get", "list", "watch"]
- apiGroups: ["*"] # For truly generic resource access as stated in [2]
  resources: ["*"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# For OpenShift specific resources, if applicable
- apiGroups: ["project.openshift.io"]
  resources: ["projects"]
  verbs: ["list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubernetes-mcp-server-sa
  namespace: aiops
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-mcp-server-rb
subjects:
- kind: ServiceAccount
  name: kubernetes-mcp-server-sa
  namespace: aiops
roleRef:
  kind: ClusterRole
  name: kubernetes-mcp-server-role
  apiGroup: rbac.authorization.k8s.io
---
